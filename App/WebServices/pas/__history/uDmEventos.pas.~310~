{ WEB SERVICES Versão 2022.11.0001
+---------------------------------------------------------------------------+
 Repositório dos eventos de requisições e respostas
 Data Criação........: 10/11/2022
 Autor...............: Hilson Santos
+---------------------------------------------------------------------------+}
unit uDmEventos;

interface

uses
  System.SysUtils, System.Classes, System.JSON, System.Generics.Collections, Vcl.Dialogs,
  Data.DB, Data.Win.ADODB, Data.Bind.Components, Data.Bind.ObjectScope,
  uDWDataModule, uDWAbout, uDWJSONObject, uDWConsts,
  uRESTDWServerContext, uRESTDWServerEvents, uRESTDWPoolerDB,
  REST.Types, REST.Client, REST.Authenticator.Basic, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdHTTP;

type
  TfDmEventos = class(TServerMethodDataModule)
    DWECidades: TDWServerEvents;
    DWEPracas: TDWServerEvents;
    DWESupervisores: TDWServerEvents;
    DWEGerentes: TDWServerEvents;
    IdHTTP: TIdHTTP;
    procedure ServerMethodDataModuleCreate(Sender: TObject);
  private
    {
    TRequest: TRequestType;
    Query: TADOQuery;
    Json: uDWJSONObject.TJSONValue;
    Erro: string;
    JsonGetArray: TJSONArray;
    function ListarCidades(out StatusCode: Integer): string;
    function ListarPracas(out StatusCode: Integer): string;
    function ListarGerentes(out StatusCode: Integer): string;
    function ListarSupervisores(out StatusCode: Integer): string;
    }
    procedure DWServerEventsEventsAPICidades(
              var Params: TDWParams;
              var Result: string;
              const RequestType: TRequestType;
              var StatusCode: Integer; RequestHeader: TStringList);
    {
    procedure DWServerEventsEventsAPIPracas(
              var Params: TDWParams;
              var Result: string;
              const RequestType: TRequestType;
              var StatusCode: Integer; RequestHeader: TStringList);
    procedure DWServerEventsEventsAPIGerentes(
              var Params: TDWParams;
              var Result: string;
              const RequestType: TRequestType;
              var StatusCode: Integer; RequestHeader: TStringList);
    procedure DWServerEventsEventsAPISupervisores(
              var Params: TDWParams;
              var Result: string;
              const RequestType: TRequestType;
              var StatusCode: Integer; RequestHeader: TStringList);
    }
  public

  end;

var
  fDmEventos: TfDmEventos;
  Requisicao: string;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses uDmBaseDados;

{$R *.dfm}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{ LISTAR CIDADES }
{ Essa função executa a "ListarCidades" na classe "TCidades" }
{
function TfDmEventos.ListarCidades(out StatusCode: Integer): string;
var
    ClaCidade: TCidades;
begin
    ClaCidade:= TCidades.Create; // Estância o objeto "ClaCidade"
    Json:= uDWJSONObject.TJSONValue.Create; // Estância o objeto "Json"
    Query:= ClaCidade.ListarCidades(Erro); // O objeto recebe o resultado da query da função "ListarCidades" na classe TCidades
    try
        try
            Json.LoadFromDataset('', Query, False, jmPureJSON, 'dd/mm/yyyy hh:nn'); // Executa os dados no dataset
            Result:= Json.ToJSON; // Recebe os dados no formato json
            StatusCode:= 200;
            except on E: Exception do begin
                //Result:= '["retorno": "' + E.Message + '"]';
                StatusCode:= 400;
            end;
        end;
        finally
            ClaCidade.DisposeOf;  // Destroy o objeto "ClaCidade"
            Json.DisposeOf;       // Destroy o objeto "Json"
            Query.DisposeOf;      // Destroy o objeto "Query"
    end;
end;
}
{ LISTAR PRAÇAS }
{ Essa função executa a "ListarPraças" na classe "TPracas" }
{
function TfDmEventos.ListarPracas(out StatusCode: Integer): string;
var
    ClaPraca: TPracas;
begin
    ClaPraca:= TPracas.Create; // Estância o objeto "ClaPraca"
    Json:= uDWJSONObject.TJSONValue.Create; // Estância o objeto "Json"
    Query:= ClaPraca.ListarPracas(Erro); // O objeto recebe o resultado da query da função "ListarPracas" na classe TPracas
    try
        try
            Json.LoadFromDataset('', Query, False, jmPureJSON, 'dd/mm/yyyy hh:nn'); // Executa os dados no dataset
            Result:= Json.ToJSON; // Recebe os dados no formato json
            StatusCode:= 200;
            except on E: Exception do begin
                Result:= '["retorno": "' + E.Message + '"]';
                StatusCode:= 400;
            end;
        end;
        finally
        ClaPraca.DisposeOf; // Destroy o objeto "ClaPraca"
        Json.DisposeOf;     // Destroy o objeto "Json"
        Query.DisposeOf;    // Destroy o objeto "Query"
    end;
end;
}
{ LISTAR GERENTES }
{ Essa função executa a "ListarGerentes" na classe "TGerentes" }
{
function TfDmEventos.ListarGerentes(out StatusCode: Integer): string;
var
    ClaGerente: TGerentes;
begin
    ClaGerente:= TGerentes.Create; // Estância o objeto "TGerente"
    Json:= uDWJSONObject.TJSONValue.Create; // Estãncia o objeto "Json"
    Query:= ClaGerente.ListarGerentes(Erro); // O objeto recebe o resultado da query da função "ListarGerentes" na classe TGerentes
    try
        try
            Json.LoadFromDataset('', Query, False, jmPureJSON, 'dd/mm/yyyy'); // Executa os dados no dataset
            Result:= Json.ToJSON; // Recebe os dados no formato json
            StatusCode:= 200;
            except on E: Exception do begin
                Result:= '["retorno": "' + E.Message + '"]';
                StatusCode:= 400;
            end;
        end;
        finally
        ClaGerente.DisposeOf; // Destroi o objeto "ClaGerente"
        Json.DisposeOf;       // Destroi o objeto "Json"
        Query.DisposeOf;      // Destroi o objeto "Query"
    end;
end;
}
{ LISTAR SUPERVISORES }
{ Essa função executa a "ListarSupervisores" na classe "TSupervisores" }
{
function TfDmEventos.ListarSupervisores(out StatusCode: Integer): string;
var
    ClaSupervisor: TSupervisores;
begin
    ClaSupervisor:= TSupervisores.Create; // Estância o objeto "ClaSupervisor"
    Json:= uDWJSONObject.TJSONValue.Create; // Estância o objeto "Json"
    Query:= ClaSupervisor.ListarSupervisores(Erro); // O objeto recebe o resultado da query da função "ListarSupervisores" na classe TSupervisores
    try
        try
            Json.LoadFromDataset('', Query, False, jmPureJSON, 'dd/mm/yyyy hh:nn'); // Executa os dados no dataset
            Result:= Json.ToJSON; // Recebe os dados no formato json
            StatusCode:= 200;
            except on E: Exception do begin
                Result:= '["retorno": "' + E.Message + '"]';
                StatusCode:= 400;
            end;
        end;
        finally
        ClaSupervisor.DisposeOf;  // Destroy o objeto "ClaSupervisor"
        Json.DisposeOf;           // Destroy o objeto "Json"
        Query.DisposeOf;          // Destroy o objeto "Query"
    end;
end;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PROCEDURES //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{ Essa procedure executa o evento "api-cadan/cidades" }
procedure TfDmEventos.DWServerEventsEventsAPICidades(
          var Params: TDWParams;
          var Result: string;
          const RequestType: TRequestType;
          var StatusCode: Integer; RequestHeader: TStringList);
var
    RetornoSite: string;
    Response: TStringStream;
begin
    Response := TStringStream.Create('');
    try
       with IdHTTP do begin
            with Request do begin
                 CustomHeaders.Clear;
                 Clear;
                 URL:= 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
                 Host:= 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
                 Referer:= 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
                 Method:= 'GET';
                 with Authentication do begin
                      Username:= 'meuusername';
                      Password:= 'meupassword';
                 end;
            end;
            try
                RetornoSite:= Get('http://127.0.0.1:8000/api/consinco/cidades');
                except on E: Exception do begin
                    IdHTTP.Disconnect;
                    if Pos('400',E.Message) > 0 then
                       ShowMessage('400 – Requisição ruim: A requisição não pôde ser interpretada pelo servidor em razão de erros de formato/sintaxe.')
                    else if pos('401',E.Message) > 0 then
                         ShowMessage('401 – Não autorizado: A requisição requer autenticação por parte do cliente e as informações de autenticação não foram localizadas ou não são válidas.')
                    else
                        ShowMessage(E.Message);
               end;
            end;
       end;
       finally
            Response.DisposeOf;
    end;


    {
    with IdHTTP do begin
         with Request do begin
              Clear;
              CustomHeaders.Clear;
              ContentType:= 'application/json';
              Accept:= 'application/json';
              URL := 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
              Host := 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
              Referer := 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
              Method := 'GET';
              with Authentication do begin
                   Username:= 'meuusername';
                   Password:= 'meupassword';
              end;
              //CustomHeaders.Add('Authorization: Token token="6d77dfdadfadfadsfasdfadfasdfasdfasdfasdf"');
         end;

         // Verificar se ja existe o registro
         // aqui ele vai retornar um string no formato json
         RetornoSite:= Get('http://127.0.0.1:8000/api/consinco/cidades');

         // Inserir um registro
         // objeto registro é uma stringlist com apenas uma linha com a string Json
         // no meu caso é
         RequestHeader:= TStringList.Create;
         RequestHeader.Add(RetornoSite);
         Post('' + '/api/empresas', RequestHeader);

         // Atualizar um registro
         // Para fazer o put tem que criar um stream e passar a string json
         //IdHTTP.Put('host' + '/api/empresas/'+'objetoCliente.Id', Stream);
    end;
    }
    {
    QReg:= 0;
    LReg:= LimiteRegistro;
    Result:= ListarCidades(StatusCode); // Recebe o resultado da função "ListarCidades"
    if StatusCode = 200 then begin // Se o status code for 200, inseri os dados na tabela "MXSCIDADE"
       JsonValue:= Result; // Recebe os dados no formato Json
       ClaCidade:= TCidades.Create; // Estância o objeto ClaCidade
       try
           ClaCidade.QInsertInto:= '';
           JsonGetArray:= TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(JsonValue), 0) as TJSONArray; // Recebe o resultado do json

    if RequestType = TRequestType.rtPost then
        Result := CriarPedido(Params.ItemsString['id_usuario'].AsString,
                              Params.ItemsString['categoria'].AsString,
                              Params.ItemsString['grupo'].AsString,
                              Params.ItemsString['endereco'].AsString,
                              Params.ItemsString['dt_servico'].AsString, // yyyy-mm-dd hh:nn:ss
                              Params.ItemsString['detalhe'].AsString,
                              Params.ItemsString['qtd_max_orc'].AsString,
                              StatusCode)

    else


var
  http           : TIdHTTP;
  AStrResponse   : TStringStream;
  oSSL           : TIdSSLIOHandlerSocketOpenSSL;
  FURL           : String;
begin
  Result:= FALSE;

  http:= TIdHTTP.Create(nil);
  oSSL := TIdSSLIOHandlerSocketOpenSSL.Create(nil);

    oSSL.SSLOptions.Method      := sslvSSLv23;
    oSSL.SSLOptions.Mode        := sslmUnassigned;
    oSSL.SSLOptions.VerifyMode  := [];
    oSSL.SSLOptions.VerifyDepth := 0;
    oSSL.host                   := '';

    http.IOHandler       := oSSL;

    http.HandleRedirects := TRUE;

    http.request.ContentType := 'application/json';

    FURL := 'http://a_sua_url.com/alguma_coisa'

    AStrResponse := TStringStream.Create;

    http.Get(FURL, AStrResponse);
    Response.Text := AStrResponse.DataString;

    FreeAndNil(AStrResponse);

    http.Disconnect;

  FreeAndNil(oSSL);
  FreeAndNil(http);


Var Response: TStringStream;
  Arquivo: TIdMultipartFormDataStream;
begin
  Response := TStringStream.Create('');
  Arquivo := TIdMultiPartFormDataStream.Create;
  Try
     Arquivo.AddFile('xml', 'c:\ancine.xml', 'xml/text');
     IdHTTP.Request.CustomHeaders.Clear;
     IdHTTP.Request.Clear;
     IdHTTP.Request.BasicAuthentication := True;
     IdHTTP.Request.Authentication := TIdBasicAuthentication.Create;
     IdHTTP.Request.Accept := 'text/xml';
     IdHTTP.Request.ContentType := 'application/x-www-form-urlencoded';
     IdHTTP.Request.ContentEncoding := 'multipart/form-data';
     IdHTTP.Request.UserAgent := 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; GTB5; Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1) ; Maxthon; InfoPath.1; .NET CLR 3.5.30729; .NET CLR 3.0.30618)';

     IdHTTP.Request.URL := 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
     IdHTTP.Request.Host := 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
     IdHTTP.Request.Referer := 'http://scbcertificacao.ancine.gov.br/scb/v1.0/';
     IdHTTP.Request.Method := 'POST';
     IdHTTP.Request.Authentication.Username:= 'meuusername';
     IdHTTP.Request.Authentication.Password:= 'meupassword';
     Try
        screen.cursor := crSQLWait;
        Panel1.Visible := True;
        Refresh;
        IdHTTP.Post('https://scb.ancine.gov.br/scb/v1.0/bilheterias', Arquivo, Response);
        ShowMessage(Response.DataString);
     except
        on E: Exception do
        Begin
           Screen.Cursor := CrDefault;
           IdHTTP.Disconnect;
           if pos('400',E.Message) > 0 then
              ShowMessage('400 – Requisição ruim: A requisição não pôde ser interpretada pelo servidor em razão de erros de formato/sintaxe.')
           Else if pos('401',E.Message) > 0 then
              ShowMessage('401 – Não autorizado: A requisição requer autenticação por parte do cliente e as informações de autenticação não foram localizadas ou não são válidas.')
           Else
              ShowMessage(e.message);
           Panel1.Visible := False;
        end;
     end;
  finally
     Response.Free();
     Arquivo.Free();
     Panel1.Visible := False;
     Panel1.Caption := 'Tentando conexão com o ANCINE';
     Screen.Cursor := CrDefault;
  end;




           if JsonGetArray.Count <> 0 then begin
              TReg:= JsonGetArray.Count;
              if TReg < LReg then
                 LReg:= TReg;
              with JsonGetArray do begin
                   for I:= 0 to Count - 1 do begin
                       QReg:= QReg + 1;
                       with Items[I] do begin
                            Codigo:=        GetValue<integer> ('SEQCIDADE', 0).ToString;
                            Ibge:=          GetValue<integer> ('CODIBGE', 0).ToString;
                            Nome:=          GetValue<string>  ('CIDADE');
                            Uf:=            GetValue<string>  ('UF');
                            DtaAlteracao:=  GetValue<string>  ('DTAALTERACAO');
                       end;

                       with ClaCidade do begin
                            TRequest:= CheckCidade(Codigo, TRequest);
                            if TRequest = TRequestType.rtPost then begin
                               QInsertInto:= QInsertInto +
                                             'INTO mxscidade(codcidade, codibge, nomecidade, uf)' +
                                             'VALUES' +
                                             '('''+Codigo+''', '''+Ibge+''', '''+Nome+''', '''+Uf+''')'
                                           ;

                               if QReg = LReg then begin
                                  InsertCidades(Codigo, Ibge, Nome, Uf, Erro);
                                  TReg:= TReg - QReg;
                                  if TReg >= LReg then begin
                                     QReg:= 0;
                                     QInsertInto:= '';
                                  end;
                               end;

                               if TReg < LReg then begin
                                  LReg:= TReg;
                                  QReg:= 0;
                                  QInsertInto:= '';
                               end;

                            end else begin
                                UpdateCidades(Codigo, Ibge, Nome, Uf, Erro);
                            end;
                       end;
                   end;
              end;
           end;
           finally
              ClaCidade.DisposeOf;
       end;
    end;
    }
end;

{ Essa procedure executa o evento "api-cadan/pracas" }
{
procedure TfDmEventos.DWServerEventsEventsAPIPracas(
          var Params: TDWParams;
          var Result: string;
          const RequestType: TRequestType;
          var StatusCode: Integer; RequestHeader: TStringList);
var
    ClaPraca: TPracas;
    Codigo,
    Regiao,
    Rota,
    Nome,
    Situacao,
    JsonValue: string;
    I,
    TReg,
    QReg,
    LReg: Integer;
begin
    QReg:= 0;
    LReg:= LimiteRegistro;
    Result:= ListarPracas(StatusCode); // Recebe o resultado da função "ListarPracas"
    if StatusCode = 200 then begin // Se o status code for 200, inseri os dados na tabela "MXSPRACA"
       JsonValue:= Result; // Recebe os dados no formato Json
       ClaPraca:= TPracas.Create; // Estância o objeto ClaPraca
       try
           JsonGetArray:= TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(JsonValue), 0) as TJSONArray; // Recebe o resultado do json
           if JsonGetArray.Count <> 0 then begin
              TReg:= JsonGetArray.Count;
              if TReg < LReg then
                 LReg:= TReg;
              with JsonGetArray do begin
                   for I:= 0 to Count - 1 do begin
                       QReg:= QReg + 1;
                       with Items[I] do begin
                            Codigo:=    GetValue<string> ('SEQPRACA');
                            Regiao:=    GetValue<string> ('NROREGICAO');
                            Rota:=      GetValue<string> ('SEQROTA');
                            Nome:=      GetValue<string> ('DESCPRACA');
                            Situacao:=  GetValue<string> ('STATUS');
                       end;

                       with ClaPraca do begin
                            TRequest:= CheckPraca(Codigo, TRequest);
                            if TRequest = TRequestType.rtPost then begin
                               QInsertInto:= QInsertInto +
                                             'INTO mxspraca(codpraca, numregiao, rota, praca, situacao)' +
                                             'VALUES' +
                                             '('''+Codigo+''', '''+Regiao+''', '''+Rota+''', '''+Nome+''', '''+Situacao+''')'
                                           ;

                               if QReg = LReg then begin
                                  InsertPracas(Codigo, Regiao, Rota, Nome, Situacao, Erro);
                                  TReg:= TReg - QReg;
                                  if TReg >= LReg then begin
                                     QReg:= 0;
                                     QInsertInto:= '';
                                  end;
                               end;

                               if TReg < LReg then begin
                                  LReg:= TReg;
                                  QReg:= 0;
                                  QInsertInto:= '';
                               end;

                            end else begin
                                UpdatePracas(Codigo, Regiao, Rota, Nome, Situacao, Erro);
                            end;
                       end;
                   end;
              end;
           end;
           finally
              ClaPraca.DisposeOf;
       end;
    end;
end;
}
{ Essa procedure executa o evento "api-cadan/gerentes" }
{
procedure TfDmEventos.DWServerEventsEventsAPIGerentes(
          var Params: TDWParams;
          var Result: string;
          const RequestType: TRequestType;
          var StatusCode: Integer; RequestHeader: TStringList);
var
    ClaGerente: TGerentes;
    Cogerente,
    CoRca,
    NoGerente,
    JsonValue: string;
    I,
    TReg,
    QReg,
    LReg: Integer;
begin
    QReg:= 0;
    LReg:= LimiteRegistro;
    Result:= ListarGerentes(StatusCode); // Recebe o resultado da função "ListarGerentes"
    if StatusCode = 200 then begin // Se o status code for 200, inseri os dados na tabela "MXSGERENTE"
       JsonValue:= Result; // Recebe os dados no formato Json
       ClaGerente:= TGerentes.Create; // Estância o objeto ClaGerente
       try
           JsonGetArray:= TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(JsonValue), 0) as TJSONArray; // Recebe o resultado do json
           if JsonGetArray.Count <> 0 then begin
              TReg:= JsonGetArray.Count;
              if TReg < LReg then
                 LReg:= TReg;
              with JsonGetArray do begin
                   for I:= 0 to Count - 1 do begin
                       QReg:= QReg + 1;
                       with Items[I] do begin
                            Cogerente:= GetValue<string> ('SEQGERENTE');
                            CoRca:=     GetValue<string> ('SEQRCA');
                            NoGerente:= GetValue<string> ('NOME');
                       end;

                       with ClaGerente do begin
                            TRequest:= CheckGerente(Cogerente, TRequest);
                            if TRequest = TRequestType.rtPost then begin
                               QInsertInto:= QInsertInto +
                                             'INTO mxsgerente(codgerente, cod_cadrca, nomegerente)' +
                                             'VALUES' +
                                             '('''+Cogerente+''', '''+CoRca+''', '''+NoGerente+''')'
                                           ;

                               if QReg = LReg then begin
                                  InsertGerentes(Cogerente, CoRca, NoGerente, Erro);
                                  TReg:= TReg - QReg;
                                  if TReg >= LReg then begin
                                     QReg:= 0;
                                     QInsertInto:= '';
                                  end;
                               end;

                               if TReg < LReg then begin
                                  LReg:= TReg;
                                  QReg:= 0;
                                  QInsertInto:= '';
                               end;

                            end else begin
                                UpdateGerentes(Cogerente, CoRca, NoGerente, Erro);
                            end;
                       end;
                   end;
              end;
           end;
           finally
              ClaGerente.DisposeOf; // Destroi o objeto da memória
       end;
    end;
end;
}
{ Essa procedure executa o evento "api-cadan/supervisores" }
{
procedure TfDmEventos.DWServerEventsEventsAPISupervisores(
          var Params: TDWParams;
          var Result: string;
          const RequestType: TRequestType;
          var StatusCode: Integer; RequestHeader: TStringList);
var
    ClaSupervisor: TSupervisores;
    CoSupervisor,
    CoRca,
    CoGerente,
    NoSupervisor,
    CoSituacao,
    JsonValue: string;
    I,
    TReg,
    QReg,
    LReg: Integer;
begin
    QReg:= 0;
    LReg:= LimiteRegistro;
    Result:= ListarSupervisores(StatusCode); // Recebe o resultado da função "ListarSupervisores"
    if StatusCode = 200 then begin // Se o status code for 200, inseri os dados na tabela "MXSSUPERV"
       JsonValue:= Result; // Recebe os dados no formato Json
       ClaSupervisor:= TSupervisores.Create; // Estância o objeto ClaSupervisor
       try
           JsonGetArray:= TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(JsonValue), 0) as TJSONArray; // Recebe o resultado do json
           if JsonGetArray.Count <> 0 then begin
              TReg:= JsonGetArray.Count;
              if TReg < LReg then
                 LReg:= TReg;
              with JsonGetArray do begin
                   for I:= 0 to Count - 1 do begin
                       QReg:= QReg + 1;
                       with Items[I] do begin
                            CoSupervisor:= GetValue<string> ('SEQSUPERVISOR');
                            CoRca:=        GetValue<string> ('SEQRCA');
                            CoGerente:=    GetValue<string> ('SEQGERENTE');
                            NoSupervisor:= GetValue<string> ('NOME');
                            CoSituacao:=   GetValue<string> ('STATUS');
                       end;

                       with ClaSupervisor do begin
                            TRequest:= CheckSupervisor(CoSupervisor, TRequest);
                            if TRequest = TRequestType.rtPost then begin
                               QInsertInto:= QInsertInto +
                                             'INTO mxssuperv(codsupervisor, cod_cadrca, codgerente, nome, posicao)' +
                                             'VALUES' +
                                             '('''+CoSupervisor+''', '''+CoRca+''', '''+CoGerente+''', '''+NoSupervisor+''', '''+CoSituacao+''')'
                                           ;

                               if QReg = LReg then begin
                                  InsertSupervisores(CoSupervisor, CoRca, CoGerente, NoSupervisor, CoSituacao, Erro);
                                  TReg:= TReg - QReg;
                                  if TReg >= LReg then begin
                                     QReg:= 0;
                                     QInsertInto:= '';
                                  end;
                               end;

                               if TReg < LReg then begin
                                  LReg:= TReg;
                                  QReg:= 0;
                                  QInsertInto:= '';
                               end;

                            end else begin
                                UpdateSupervisores(CoSupervisor, CoRca, CoGerente, NoSupervisor, CoSituacao, Erro);
                            end;
                       end;
                   end;
              end;
           end;
           finally

       end;
    end;
end;
}
{ Ao criar o data módulo é os eventos são parametrizados }

procedure TfDmEventos.ServerMethodDataModuleCreate(Sender: TObject);
begin
    // Eventos api-cadan/cidades \\
    with DWECidades do begin
         ContextName:= 'api-cadan';
         with Events do begin
              Clear;
              Add.DisplayName             := 'cidades';
              Items[0].EventName          := 'cidades';
              Items[0].JsonMode           := jmPureJSON;
              Items[0].Name               := 'cidades';
              Items[0].OnReplyEventByType := DWServerEventsEventsAPICidades;
         end;
    end;
    {
    // Eventos api-cadan/pracas \\
    with DWEPracas do begin
         ContextName:= 'api-cadan';
         with Events do begin
              Clear;
              add.DisplayName             := 'pracas';
              items[0].EventName          := 'pracas';
              Items[0].JsonMode           := jmPureJSON;
              Items[0].Name               := 'pracas';
              Items[0].OnReplyEventByType := DWServerEventsEventsAPIPracas;
         end;
    end;

    // Eventos api-cadan/gerentes \\
    with DWEGerentes do begin
         ContextName:= 'api-cadan';
         with Events do begin
              Clear;
              add.DisplayName             := 'gerentes';
              items[0].EventName          := 'gerentes';
              Items[0].JsonMode           := jmPureJSON;
              Items[0].Name               := 'gerentes';
              Items[0].OnReplyEventByType := DWServerEventsEventsAPIGerentes;
         end;
    end;

    // Eventos api-cadan/suvervisores \\
    with DWESupervisores do begin
         ContextName:= 'api-cadan';
         with Events do begin
              Clear;
              add.DisplayName             := 'supervisores';
              items[0].EventName          := 'supervisores';
              Items[0].JsonMode           := jmPureJSON;
              Items[0].Name               := 'supervisores';
              Items[0].OnReplyEventByType := DWServerEventsEventsAPISupervisores;
         end;
    end;
    }
end;

end.
